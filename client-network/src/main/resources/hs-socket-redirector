#!/bin/bash
#
# Simple front-end to iptables to redirect a destination to the client service
#
# By default, the script DELETES all the hypersocket added rules, use --add as the
# first argument to add a new rule.
#
# Usage:0
#
# [--add] <sourceIpOrHostname> <sourcePort> <destinationIp> <destinationPort> 

# The comment indicating Hypersocket temporary rules. This might save someone 
# accidentally saving firewall configuration while HS is running, and also
# helps us find the rules to delete (cleaning up on the next connection 
# if the client crashes for example)

COMMENT="#HYPERSOCKET-CLIENT-TEMPORARY-RULE-DO-NOT-SAVE"

apply_rules() {
	status=0
	
	# Apply PREROUTING rule
	if ! iptables -t nat -"${5}" PREROUTING -p tcp -d "${1}" --dport "${2}" -m comment --comment "${COMMENT}" -j DNAT --to-destination "${3}":"${4}" ; then
		echo "$0: PREROUTING rule ${1}:${2} -> ${3}:${4} failed." >&2
		status=1
	fi
	
	# Because we are redirecting to localhost, OUTPUT chain is also needed
	if ! iptables -t nat -"${5}" OUTPUT -p tcp -d "${1}" --dport "${2}" -m comment --comment "${COMMENT}" -j DNAT --to-destination "${3}":"${4}" ; then
		echo "$0: OUTPUT rule ${1}:${2} -> ${3}:${4} failed." >&2
		status=1
	fi
	
	return ${status}
}

# Insert rules by default
option=D

# Parse any options
if [ "$1" == "--add" ]; then
	shift
	option=I
fi

# Delete all previous rules
iptables-save | grep -v "${COMMENT}" | iptables-restore

# Add the new rule
if [ "${option}" = I ]; then
	apply_rules $* ${option}
fi
