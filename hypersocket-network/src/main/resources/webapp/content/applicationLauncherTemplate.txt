/**
 *  This should be replaced with valid template
 */ 
import java.util.HashMap;
import java.util.Map;
import java.util.HashSet;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import java.net.URLEncoder;
import com.hypersocket.attributes.AttributeCategory;
import com.hypersocket.attributes.AttributeService;
import com.hypersocket.realm.Realm;
import com.hypersocket.template.TemplateResourceService;
import com.hypersocket.resource.ResourceNotFoundException;
import com.hypersocket.resource.ResourceCreationException;
import com.hypersocket.properties.ResourceUtils;

String name = "${templateName}";
Realm realm = templateService.getCurrentRealm();
String resourceKey = StringUtils.uncapitalize(StringUtils
		.deleteWhitespace(name));

try {
	if(templateService.getResourceByName(name)!=null) {
	   throw new ResourceCreationException(TemplateResourceService.RESOURCE_BUNDLE, "error.templateExists", new String[] {name});
	}
} catch(ResourceNotFoundException ex) { }

try {

	boolean createUserAttribute = ${createUsernameAttribute};
	boolean createPasswordAttribute = ${createPasswordAttribute};
	boolean userProvidesUsername = ${userProvidesUsername};
	boolean userProvidesPassword = ${userProvidesPassword};
	String usernameAttribute = "${principalName}";
	String passwordAttribute = "${password}";
	Integer catWeight  = attributeService.getMaximumCategoryWeight().intValue() + 1000;
	if (createUserAttribute || createPasswordAttribute) {
	
		
		String attributeCategory = "${attributeCategory}";
		AttributeCategory cat = attributeService
				.getCategoryByName(attributeCategory);
		if (cat == null) {
			cat = attributeService.createAttributeCategory(
					attributeCategory, "user", catWeight);
		}

		Integer attrWeight = attributeService.getMaximumAttributeWeight(cat).intValue() + 1000;
		
		if (createUserAttribute && attributeService.getAttributeByName(name + " Username")==null) {
			attributeService.createAttribute(name + " Username",
					cat.getId(), "Enter your username for " + name, "", attrWeight++, "TEXT",
					false, false, resourceKey
							+ "Username");
			usernameAttribute = "${" + resourceKey + "Username}";
			
			if(userProvidesUsername) {
			    realmService.setRealmProperty(realmService.getCurrentRealm(), "realm.userEditableProperties", 
			    	ResourceUtils.addToValues(realmService.getRealmProperty(realmService.getCurrentRealm(), "realm.userEditableProperties"), 
			    		resourceKey + "Username"));
			}
		}

		if (createPasswordAttribute && attributeService.getAttributeByName(name + " Password")==null) {
			attributeService.createAttribute(name + " Password",
					cat.getId(), "Enter your password for " + name, "", attrWeight, "PASSWORD",
					false, true, resourceKey
							+ "Password");
			passwordAttribute = "${" + resourceKey + "Password}";
			
			if(userProvidesPassword) {
			    realmService.setRealmProperty(realmService.getCurrentRealm(), "realm.userEditableProperties", 
			    	ResourceUtils.addToValues(realmService.getRealmProperty(realmService.getCurrentRealm(), "realm.userEditableProperties"), 
			    		resourceKey + "Password"));
			}
		}
	}

	String encodedElements = "${encodedElements}".replace("${principalName}", usernameAttribute).replace("${password}", passwordAttribute);
    encodedElements = encodedElements.replace(URLEncoder.encode("${principalName}","UTF-8"), 
              URLEncoder.encode(usernameAttribute,"UTF-8")).replace(URLEncoder.encode("${password}","UTF-8"),
                    URLEncoder.encode(passwordAttribute,"UTF-8"));
	Map properties = new HashMap();
	properties.put("matchUrl", "${matchUrl}");
	properties.put("encodedSelectors", "${encodedSelectors}");
	properties.put("encodedElements", encodedElements);
	properties.put("encodedActions", "${encodedActions}");
	properties.put("errors", "");
	properties.put("scripts", "${scripts}");

	return templateService.internalCreateResource(name, new HashSet(), realm, properties);
	
} catch (Throwable e) {
    log.error("Failed to create template", e);
	throw new ResourceCreationException(TemplateResourceService.RESOURCE_BUNDLE, "error.scriptFailure", new String[] {e.getMessage()});
} 
